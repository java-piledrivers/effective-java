```java
		String name = **new** String("java");
		String name2 = **new** String("java");
		//**new**를 사용해서 만드는 경우 매번 새로 객체가 생성됨
		//**같은 String이어도 다른 객체가 됨** 
		
		System.out.println(name == name2);//false
		System.out.println(name.equals(name2));//true (equals:컨텐츠 비교)
		
		//캐싱하고 있는 리터럴이 동일한 레퍼런스를 참조하게 해줌 
		String name3 = "hello";
		String name4 = "hello";
		System.out.println(name3 == name4);//true

```

```java
		Boolean true1 = Boolean.**valueOf**("true");
		Boolean true2 = Boolean.**valueOf**("true");
		// valueOf가 동일한 객체를 리턴
		
		System.out.println(true==true2); //true
		System.out.println(true1 == **Boolean.TRUE**); //true 
		//(동일한 객체) boolean에 있는 상수
```

어댑터는 저희가 흔히 아는 어댑터라고 생각하면 됩니다.
(어댑터: 다른 전기나 기계 장치를 서로 연결해서 작동할 수 있도록 만들어 주는 결합 도구)
자바에서는 뷰와 데이터(뒷 단)를 연결 해주는 결합도구라고 쉽게 생각하면 됩니다.

'어댑터가 실제 작업은 뒷 단 객체에 위임한다. 즉 뒷 단 객체 외에는 관리할 상태가 없다.

//뒷 단에 데이터를 넣는다
Map<String,String> death = new HashMap<>();
death.put("hell", "good");
death.put("heaven", "bad");

//어댑터를 여러개 만든다
Set<String> ch1 = death.keySet(); 
Set<String> ch2 = death.keySet();
//=>우린 보통 이럴 때 매번 '새로운' set 인스턴스가 만들어지리라고 생각하지만 매번 같은 Set 인스턴스를 반환할지도 모른다
//(쉽게 말해서 ch1 과 ch2는 별개의 인스턴스일 것이라고 생각)

//과연 두 개는 별개의 인스턴스일지 테스트
ch1.remove("hell"); //ch1에 키 값을 지우기

//뷰 확인(keySet)
System.out.println(ch2.size()); //ch1이 아니 다른 ch2로 확인해보기  
//결과:1 =>같은 Set 인스턴스를 반환한걸 확인할 수 있다


//뒷 단 데이터(map)를 확인
System.out.println(death.size()); 
//결과:1=>map객체 안에 size도 1로 줄어들은것을 알 수 있다
