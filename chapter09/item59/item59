### 라이브러리 :

[라이브러리는 자바에서 만든 기능이다.](https://codingwone.tistory.com/m/8) (API)

**무작위 정수 예제**

```java
static Random rnd = new Random();

	static int random(int n) {
		return **Math.abs**(rnd.nextInt()) % n; 
	}

	public static void main(String[] args) {
		int n = 2 * (Integer.MAX_VALUE / 3);
		int low = 0;
		for (int i = 0; i < 1000000; i++) {
			if **(random(n) < n / 2)**
				low++;
		}
		System.out.println(low);
	}
```

⇒~~500000언저리~~

⇒**666954**

`**<원하는 결과가 나오지 않는 이유>**`

1. **n이 그리 크지않은 2의 제곱수라면 얼마 지나지 않아 같은 수열이 반복된다.**
2. **n이 2의 제곱수가 아니라면 몇몇 숫자가 평균적으로 더 자주 반환된다.**
3. **지정한 범위 '바깥'의 수가 종종 튀어 나올 수 있다.**
- 음수를 반환하기 때문
    
    ⇒ **abs()** : 음수를 양수로 변경 양수는 그대로 표시하여 절댓값을 리턴해줍니다
    
    ⇒ int 정수 범위 **–2,147,483,648 ~ 2,147,483,647**
    

### 라이브러리 ThreadLocalRandom을 사용

1. **표준 라이브러리를 사용하면 그 코드를 작성한 전문가의 지식과 여러분보다 앞서 사용한 다른 프로그래머들의 경험을 활용할 수 있다.**
2. **핵심적인 일과 크게 관련 없는 문제를 해결하느라 시간을 허비하지 않아도 된다.**
3. **성능이 지속해서 개선된다.기능이 점점 많아진다.** 
4. **라이브러리에 부족한 부분이 있다면 개발자 커뮤티니에서 이야기가 나오고 논의된 후 다음 릴리즈에 해당 기능이 추가되곤 한다.**
5. **우리가 작성한 코드가 많은 사람에게 낯익은 코드가 된다.**

**⇒ 유지 보수 하기 쉽다.**

[Random 대신 ThreadLocalRandom을 써야 하는 이유](https://velog.io/@sojukang/Random-%EB%8C%80%EC%8B%A0-ThreadLocalRandom%EC%9D%84-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0)

`java.util.Random`
은 멀티 쓰레드 환경에서 **하나의 인스턴스에서 전역적으로 의사 난수(pseudo random)를 반환**한다. 따라서 같은 시간에 동시 요청이 들어올 경우 경합 상태에서 성능에 문제가 생길 수 있다. 

반면 JDK 7부터 도입된 `java.util.concurrent.ThreadLocalRandom`은 `java.util.Random`
를 상속하여 멀티 쓰레드 환경에서 **서로 다른 인스턴스들에 의해 의사 난수를 반환**하므로 동시성 문제에 안전하다.(랜덤 특성상 같은 수가 나와도 설계상 문제가 아닌 정상 작동)
