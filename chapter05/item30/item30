https://www.notion.so/615c2d4abc3842d688e9b6f339dff462

### **WHY?**

클라이언트에서 **입력 매개변수와 반환값을 명시적으로 형변환해야 하는 메서드**보다 **제네릭 메서드가 더 안전하며 사용하기도 쉽다**.

→ 타입과 마찬가지로 **메서드도 형변환 없이 사용할 수 있는 편이 좋음**

### 메서드도 제네릭으로 만들 수 있다.

매개변수화 타입을 받는 정적 유틸리티 메서드는 보통 제네릭

- **[Collections의 알고리즘 메서드](https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html)는 모두 제네릭**이다.
    
    ### 배열의 정렬과 검색-sort(), binarySerach()
    
    **sort() 배열을 정렬할 때**
    
    **binarySerach() 배열에 저장된 요소를 검색할 때**
    
    ⇒ 배열에서 지정된 값이 저장된 위치를 찾아서 반환
    
    ⇒ 반드시 배열이 정렬된 상태여야 올바른 결과를 얻음
    
    - linear search(순차 검색) ↔ binary search(이진 검색)
        
        순차 검색:배열이 정렬되어 있을 필요는 없지만 하나하나 비교하기 때문에 시간이 많이 걸림
        
        이진 검색:범위를 반복적으로 절반씩 줄여가면서 검색하기 때문에 검색속도가 빠름
        
        ⇒다만, 배열이 정렬되어 있는 경우에만 사용가능
        
    
- binarySearch
    
    ```java
    public static <T> int binarySearch(List<? extends Comparable<? super T>> list, T key) {
            if (list instanceof RandomAccess || list.size()<BINARYSEARCH_THRESHOLD)
                return Collections.indexedBinarySearch(list, key);
            else
                return Collections.iteratorBinarySearch(list, key);
        }
    ```
    
- sort

- 문제가 있는 메서드 (결과)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e32ad38-e7bc-4643-9847-447d27ac8e5f/Untitled.png)
    

```java
public static Set union(Set s1, Set s2){
		Set result = new HashSet(s1);
		result.addAll(s2);
		return result;
	}
```

→ **경고 없이 안전하게 만들려면 ?**

1. **원소 타입을 타입 매개변수로 명시 ⇒<E>**
2. **메서드 안에서도 이 타입 매개변수만 사용하게 수정 ⇒**Set<E>

```java
public static <E> Set<E> union(Set<E> s1, Set<E> s2){
		Set<E> result = new HashSet<>(s1);
		result.addAll(s2);
		return result;
	}
```

- (결과)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5ee62b12-1e5a-497b-8bdc-6d9bd5feac4a/Untitled.png)
    

```java
class Main {
	
	public static <E> Set<E> **union**(Set<E> s1, Set<E> s2){
		Set<E> result = new HashSet<>(s1);
		result.addAll(s2);
		return result;
	}	
	public static void main(String[] args) {
		
		Set<String> abc = Set.of("B", "D", "C");
		Set<String> def = Set.of("A", "F", "G");
		
		Set<String> abcdef = **union**(abc, def);
		System.out.println(abcdef);
		
	}
}
```

- (콘솔)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/30e171ce-007f-4852-b514-3199afe022fc/Untitled.png)
    

```java
private static UnaryOperator<**Object**> **IDENTITY_FN** = (t) -> t;
	
public static <T> **UnaryOperator<T**> identityFunction(){
	return (UnaryOperator<T>)IDENTITY_FN;
}
```

- **비검사 형변환 경고가 발생**
    
    ![tempsnip.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7db45aa5-b37c-4af4-bd80-6faca6ad9d1a/tempsnip.png)
    
- **@SuppressWarnings("unchecked")** 을 추가
    
    ```java
    private static UnaryOperator <Object> IDENTITY_FN = (t) -> t;
    
    **@SuppressWarnings("unchecked")**
    	public static <T> UnaryOperator<T> identityFunction(){
    		return (UnaryOperator<T>)IDENTITY_FN;
    	}
    
    ```
    
    [27]
    
    안전하다고 검증된 비검사 경고를 그대로 두면 
    
    → 진짜 문제를 알리는 새로운 경고가 나와도 눈치채지 못할 수 있음
    
    ⇒ 제거하지 않은 수많은 거짓 경고 속에 새로운 경고가 파묻힐 수 있음
    

### 재귀적 타입 한정

자기 자신이 들어간 표현식을 사용하여 **타입 매개변수의 허용 범위를 한정할 수 있음**

- ⇒주로 타입의 자연적 순서를 정하는 **[Comparable 인터페이스](https://www.notion.so/14-f8216671b83f46cdb9316d03fc51a4eb)**와 함께 사용됨
    
    ```java
    public interface **Comoparable<T>**{
    	int compareTo(T o);
    }
    ```
    
    거의 모든 타입은 자신과 같은 타입의 원소와만 비교할 수 있음
    
    → String  Comparable<String>
    
    → Integer Comparable<Integer>
    
    Comparable: 원소들을 정력 혹은 검색하거나, 최솟값이나 최댓값을 구하는 식으로 사용됨
    
    ⇒ 컬렉션에 담긴 모든 원소가 상호 비교될 수 있어야함
    

```java
public static <E **extends** Comparable<E>> E max(Collection<E> c);
```

⇒ 모든 타입 E는 자신과 비교할 수 있다

```java
public static <E extends Comparable<E>>E max(Collection<E> c){
		if(c.isEmpty())
			throw new IllegalArgumentException("컬렉션이 비어 있습니다");
		
		E result = null;
		
		for(E e : c)
			if(result == null || e.compareTo(result)>0)
				result = Objects.requireNonNull(e);
		
		return result;
	}a
```
